//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Config.plist`.
    static let configPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Config", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Montserrat-Black.otf`.
    static let montserratBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Black", pathExtension: "otf")
    /// Resource file `Montserrat-Medium.otf`.
    static let montserratMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "otf")

    /// `bundle.url(forResource: "Config", withExtension: "plist")`
    static func configPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Black", withExtension: "otf")`
    static func montserratBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "otf")`
    static func montserratMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Black`.
    static let montserratBlack = Rswift.FontResource(fontName: "Montserrat-Black")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")

    /// `UIFont(name: "Montserrat-Black", size: ...)`
    static func montserratBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlack, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    static func validate() throws {
      if R.font.montserratBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Black' could not be loaded, is 'Montserrat-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `Astro`.
    static let astro = Rswift.ImageResource(bundle: R.hostingBundle, name: "Astro")
    /// Image `appleLogo`.
    static let appleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appleLogo")
    /// Image `astroFiled`.
    static let astroFiled = Rswift.ImageResource(bundle: R.hostingBundle, name: "astroFiled")
    /// Image `exitFiled`.
    static let exitFiled = Rswift.ImageResource(bundle: R.hostingBundle, name: "exitFiled")
    /// Image `facebookLogo`.
    static let facebookLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebookLogo")
    /// Image `googleLogo`.
    static let googleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleLogo")
    /// Image `icnAdd`.
    static let icnAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icnAdd")
    /// Image `rocketFiled`.
    static let rocketFiled = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocketFiled")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Astro", bundle: ..., traitCollection: ...)`
    static func astro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.astro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appleLogo", bundle: ..., traitCollection: ...)`
    static func appleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "astroFiled", bundle: ..., traitCollection: ...)`
    static func astroFiled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.astroFiled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exitFiled", bundle: ..., traitCollection: ...)`
    static func exitFiled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exitFiled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebookLogo", bundle: ..., traitCollection: ...)`
    static func facebookLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleLogo", bundle: ..., traitCollection: ...)`
    static func googleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icnAdd", bundle: ..., traitCollection: ...)`
    static func icnAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icnAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rocketFiled", bundle: ..., traitCollection: ...)`
    static func rocketFiled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocketFiled, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 42 localization keys.
    struct localizable {
      /// en translation: An error occurred while loading data. Try again later.
      ///
      /// Locales: en, ru
      static let launcherAlertInitialErrorMessage = Rswift.StringResource(key: "LauncherAlertInitialErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Are you sure you want to exit?
      ///
      /// Locales: en, ru
      static let launchListLogOutSubtitle = Rswift.StringResource(key: "LaunchListLogOutSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Astronaut Name
      ///
      /// Locales: en, ru
      static let registrationFieldTitleGivename = Rswift.StringResource(key: "RegistrationFieldTitleGivename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Astronaut must be over 18 years old
      ///
      /// Locales: en, ru
      static let validationIllegalAge = Rswift.StringResource(key: "ValidationIllegalAge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Astronaut photo
      ///
      /// Locales: en, ru
      static let registrationProfilePhoto = Rswift.StringResource(key: "RegistrationProfilePhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Astronaut's date of birth
      ///
      /// Locales: en, ru
      static let registrationFieldTitleAge = Rswift.StringResource(key: "RegistrationFieldTitleAge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Bad request
      ///
      /// Locales: en, ru
      static let apiErrorBadRequest = Rswift.StringResource(key: "ApiErrorBadRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By continuing, you accept the astronaut agreement.
      ///
      /// Locales: en, ru
      static let signUpAgreementsText = Rswift.StringResource(key: "SignUpAgreementsText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let launchListLogOutDecline = Rswift.StringResource(key: "LaunchListLogOutDecline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let photoPickCancel = Rswift.StringResource(key: "PhotoPickCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Choose a login method
      ///
      /// Locales: en, ru
      static let signUpSubtitle = Rswift.StringResource(key: "SignUpSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Choose from photo library
      ///
      /// Locales: en, ru
      static let photoPickPhotoLibrary = Rswift.StringResource(key: "PhotoPickPhotoLibrary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, ru
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, ru
      static let registrationPickerBtnTitle = Rswift.StringResource(key: "RegistrationPickerBtnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, ru
      static let registrationSubmitBtnTitle = Rswift.StringResource(key: "RegistrationSubmitBtnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Last name of the astronaut
      ///
      /// Locales: en, ru
      static let registrationFieldTitleFamilyname = Rswift.StringResource(key: "RegistrationFieldTitleFamilyname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ru
      static let launchListLogOutTitle = Rswift.StringResource(key: "LaunchListLogOutTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Need authorisation
      ///
      /// Locales: en
      static let apiErrorUserUnauthorized = Rswift.StringResource(key: "ApiErrorUserUnauthorized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No description
      ///
      /// Locales: en, ru
      static let launchDetailsEmptyDescription = Rswift.StringResource(key: "LaunchDetailsEmptyDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Nobody ever reads the agreements, so we did not write them :]
      ///
      /// Locales: en, ru
      static let agreementTitle = Rswift.StringResource(key: "AgreementTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Object not found
      ///
      /// Locales: en, ru
      static let apiErrorObjectNotFound = Rswift.StringResource(key: "ApiErrorObjectNotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ru
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Only letters can be used.
      ///
      /// Locales: en, ru
      static let validationAlphabetic = Rswift.StringResource(key: "ValidationAlphabetic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Remove a photo
      ///
      /// Locales: en, ru
      static let photoPickRemove = Rswift.StringResource(key: "PhotoPickRemove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Repeat
      ///
      /// Locales: en, ru
      static let launcherAlertBtnTitleRepeat = Rswift.StringResource(key: "LauncherAlertBtnTitleRepeat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Server error
      ///
      /// Locales: en
      static let apiErrorServerError = Rswift.StringResource(key: "ApiErrorServerError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Server return bad response
      ///
      /// Locales: en, ru
      static let apiErrorBadResponse = Rswift.StringResource(key: "ApiErrorBadResponse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Set astronaut photo
      ///
      /// Locales: en, ru
      static let registrationSetPhoto = Rswift.StringResource(key: "RegistrationSetPhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign up with Apple
      ///
      /// Locales: en, ru
      static let signUpWithApple = Rswift.StringResource(key: "SignUpWithApple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign up with Facebook
      ///
      /// Locales: en, ru
      static let signUpWithFacebook = Rswift.StringResource(key: "SignUpWithFacebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign up with Google
      ///
      /// Locales: en, ru
      static let signUpWithGoogle = Rswift.StringResource(key: "SignUpWithGoogle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, ru
      static let registrationSkipBtnTitle = Rswift.StringResource(key: "RegistrationSkipBtnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: en, ru
      static let errorAlertTitle = Rswift.StringResource(key: "ErrorAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: en, ru
      static let launcherAlertTitle = Rswift.StringResource(key: "LauncherAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sure
      ///
      /// Locales: en, ru
      static let launchListLogOutAccept = Rswift.StringResource(key: "LaunchListLogOutAccept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Take a photo
      ///
      /// Locales: en, ru
      static let photoPickCamera = Rswift.StringResource(key: "PhotoPickCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: There must be more than %d characters
      ///
      /// Locales: en, ru
      static let validationTooSmall = Rswift.StringResource(key: "ValidationTooSmall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: This field is required
      ///
      /// Locales: en, ru
      static let validationRequied = Rswift.StringResource(key: "ValidationRequied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, ru
      static let apiErrorUnknown = Rswift.StringResource(key: "ApiErrorUnknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Welcome to Mars2024
      ///
      /// Locales: en, ru
      static let signUpTitle = Rswift.StringResource(key: "SignUpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Where do you want to choose a photo from?
      ///
      /// Locales: en, ru
      static let photoPickChoosePhotoSource = Rswift.StringResource(key: "PhotoPickChoosePhotoSource", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: astronaut agreement
      ///
      /// Locales: en, ru
      static let signUpAstronautAgreement = Rswift.StringResource(key: "SignUpAstronautAgreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: An error occurred while loading data. Try again later.
      ///
      /// Locales: en, ru
      static func launcherAlertInitialErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LauncherAlertInitialErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LauncherAlertInitialErrorMessage"
        }

        return NSLocalizedString("LauncherAlertInitialErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to exit?
      ///
      /// Locales: en, ru
      static func launchListLogOutSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LaunchListLogOutSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LaunchListLogOutSubtitle"
        }

        return NSLocalizedString("LaunchListLogOutSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Astronaut Name
      ///
      /// Locales: en, ru
      static func registrationFieldTitleGivename(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationFieldTitleGivename", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationFieldTitleGivename"
        }

        return NSLocalizedString("RegistrationFieldTitleGivename", bundle: bundle, comment: "")
      }

      /// en translation: Astronaut must be over 18 years old
      ///
      /// Locales: en, ru
      static func validationIllegalAge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ValidationIllegalAge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ValidationIllegalAge"
        }

        return NSLocalizedString("ValidationIllegalAge", bundle: bundle, comment: "")
      }

      /// en translation: Astronaut photo
      ///
      /// Locales: en, ru
      static func registrationProfilePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationProfilePhoto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationProfilePhoto"
        }

        return NSLocalizedString("RegistrationProfilePhoto", bundle: bundle, comment: "")
      }

      /// en translation: Astronaut's date of birth
      ///
      /// Locales: en, ru
      static func registrationFieldTitleAge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationFieldTitleAge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationFieldTitleAge"
        }

        return NSLocalizedString("RegistrationFieldTitleAge", bundle: bundle, comment: "")
      }

      /// en translation: Bad request
      ///
      /// Locales: en, ru
      static func apiErrorBadRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorBadRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorBadRequest"
        }

        return NSLocalizedString("ApiErrorBadRequest", bundle: bundle, comment: "")
      }

      /// en translation: By continuing, you accept the astronaut agreement.
      ///
      /// Locales: en, ru
      static func signUpAgreementsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpAgreementsText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpAgreementsText"
        }

        return NSLocalizedString("SignUpAgreementsText", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func launchListLogOutDecline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LaunchListLogOutDecline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LaunchListLogOutDecline"
        }

        return NSLocalizedString("LaunchListLogOutDecline", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func photoPickCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhotoPickCancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhotoPickCancel"
        }

        return NSLocalizedString("PhotoPickCancel", bundle: bundle, comment: "")
      }

      /// en translation: Choose a login method
      ///
      /// Locales: en, ru
      static func signUpSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpSubtitle"
        }

        return NSLocalizedString("SignUpSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Choose from photo library
      ///
      /// Locales: en, ru
      static func photoPickPhotoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhotoPickPhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhotoPickPhotoLibrary"
        }

        return NSLocalizedString("PhotoPickPhotoLibrary", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, ru
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, ru
      static func registrationPickerBtnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationPickerBtnTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationPickerBtnTitle"
        }

        return NSLocalizedString("RegistrationPickerBtnTitle", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, ru
      static func registrationSubmitBtnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationSubmitBtnTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationSubmitBtnTitle"
        }

        return NSLocalizedString("RegistrationSubmitBtnTitle", bundle: bundle, comment: "")
      }

      /// en translation: Last name of the astronaut
      ///
      /// Locales: en, ru
      static func registrationFieldTitleFamilyname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationFieldTitleFamilyname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationFieldTitleFamilyname"
        }

        return NSLocalizedString("RegistrationFieldTitleFamilyname", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ru
      static func launchListLogOutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LaunchListLogOutTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LaunchListLogOutTitle"
        }

        return NSLocalizedString("LaunchListLogOutTitle", bundle: bundle, comment: "")
      }

      /// en translation: Need authorisation
      ///
      /// Locales: en
      static func apiErrorUserUnauthorized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorUserUnauthorized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorUserUnauthorized"
        }

        return NSLocalizedString("ApiErrorUserUnauthorized", bundle: bundle, comment: "")
      }

      /// en translation: No description
      ///
      /// Locales: en, ru
      static func launchDetailsEmptyDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LaunchDetailsEmptyDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LaunchDetailsEmptyDescription"
        }

        return NSLocalizedString("LaunchDetailsEmptyDescription", bundle: bundle, comment: "")
      }

      /// en translation: Nobody ever reads the agreements, so we did not write them :]
      ///
      /// Locales: en, ru
      static func agreementTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AgreementTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AgreementTitle"
        }

        return NSLocalizedString("AgreementTitle", bundle: bundle, comment: "")
      }

      /// en translation: Object not found
      ///
      /// Locales: en, ru
      static func apiErrorObjectNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorObjectNotFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorObjectNotFound"
        }

        return NSLocalizedString("ApiErrorObjectNotFound", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ru
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: Only letters can be used.
      ///
      /// Locales: en, ru
      static func validationAlphabetic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ValidationAlphabetic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ValidationAlphabetic"
        }

        return NSLocalizedString("ValidationAlphabetic", bundle: bundle, comment: "")
      }

      /// en translation: Remove a photo
      ///
      /// Locales: en, ru
      static func photoPickRemove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhotoPickRemove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhotoPickRemove"
        }

        return NSLocalizedString("PhotoPickRemove", bundle: bundle, comment: "")
      }

      /// en translation: Repeat
      ///
      /// Locales: en, ru
      static func launcherAlertBtnTitleRepeat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LauncherAlertBtnTitleRepeat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LauncherAlertBtnTitleRepeat"
        }

        return NSLocalizedString("LauncherAlertBtnTitleRepeat", bundle: bundle, comment: "")
      }

      /// en translation: Server error
      ///
      /// Locales: en
      static func apiErrorServerError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorServerError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorServerError"
        }

        return NSLocalizedString("ApiErrorServerError", bundle: bundle, comment: "")
      }

      /// en translation: Server return bad response
      ///
      /// Locales: en, ru
      static func apiErrorBadResponse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorBadResponse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorBadResponse"
        }

        return NSLocalizedString("ApiErrorBadResponse", bundle: bundle, comment: "")
      }

      /// en translation: Set astronaut photo
      ///
      /// Locales: en, ru
      static func registrationSetPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationSetPhoto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationSetPhoto"
        }

        return NSLocalizedString("RegistrationSetPhoto", bundle: bundle, comment: "")
      }

      /// en translation: Sign up with Apple
      ///
      /// Locales: en, ru
      static func signUpWithApple(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpWithApple", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpWithApple"
        }

        return NSLocalizedString("SignUpWithApple", bundle: bundle, comment: "")
      }

      /// en translation: Sign up with Facebook
      ///
      /// Locales: en, ru
      static func signUpWithFacebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpWithFacebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpWithFacebook"
        }

        return NSLocalizedString("SignUpWithFacebook", bundle: bundle, comment: "")
      }

      /// en translation: Sign up with Google
      ///
      /// Locales: en, ru
      static func signUpWithGoogle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpWithGoogle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpWithGoogle"
        }

        return NSLocalizedString("SignUpWithGoogle", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, ru
      static func registrationSkipBtnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RegistrationSkipBtnTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RegistrationSkipBtnTitle"
        }

        return NSLocalizedString("RegistrationSkipBtnTitle", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: en, ru
      static func errorAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorAlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorAlertTitle"
        }

        return NSLocalizedString("ErrorAlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: en, ru
      static func launcherAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LauncherAlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LauncherAlertTitle"
        }

        return NSLocalizedString("LauncherAlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Sure
      ///
      /// Locales: en, ru
      static func launchListLogOutAccept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LaunchListLogOutAccept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LaunchListLogOutAccept"
        }

        return NSLocalizedString("LaunchListLogOutAccept", bundle: bundle, comment: "")
      }

      /// en translation: Take a photo
      ///
      /// Locales: en, ru
      static func photoPickCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhotoPickCamera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhotoPickCamera"
        }

        return NSLocalizedString("PhotoPickCamera", bundle: bundle, comment: "")
      }

      /// en translation: There must be more than %d characters
      ///
      /// Locales: en, ru
      static func validationTooSmall(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ValidationTooSmall", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ValidationTooSmall"
        }

        let format = NSLocalizedString("ValidationTooSmall", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: This field is required
      ///
      /// Locales: en, ru
      static func validationRequied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ValidationRequied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ValidationRequied"
        }

        return NSLocalizedString("ValidationRequied", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, ru
      static func apiErrorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiErrorUnknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ApiErrorUnknown"
        }

        return NSLocalizedString("ApiErrorUnknown", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Mars2024
      ///
      /// Locales: en, ru
      static func signUpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpTitle"
        }

        return NSLocalizedString("SignUpTitle", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to choose a photo from?
      ///
      /// Locales: en, ru
      static func photoPickChoosePhotoSource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhotoPickChoosePhotoSource", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PhotoPickChoosePhotoSource"
        }

        return NSLocalizedString("PhotoPickChoosePhotoSource", bundle: bundle, comment: "")
      }

      /// en translation: astronaut agreement
      ///
      /// Locales: en, ru
      static func signUpAstronautAgreement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUpAstronautAgreement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignUpAstronautAgreement"
        }

        return NSLocalizedString("SignUpAstronautAgreement", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
